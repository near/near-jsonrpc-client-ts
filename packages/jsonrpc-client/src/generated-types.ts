// Auto-generated TypeScript interface for NEAR RPC client
// Generated at: 2025-07-25T05:44:53.307Z
// Total methods: 28
//
// This file is automatically generated by tools/codegen/generate-client-interface.ts
// Do not edit manually - changes will be overwritten

import type {
  AccessKeyView,
  AccountView,
  CallResult,
  CryptoHash,
  EXPERIMENTALMaintenanceWindowsResponse,
  EXPERIMENTALValidatorsOrderedResponse,
  GenesisConfig,
  GenesisConfigRequest,
  RpcBlockRequest,
  RpcBlockResponse,
  RpcChunkRequest,
  RpcChunkResponse,
  RpcClientConfigRequest,
  RpcClientConfigResponse,
  RpcCongestionLevelRequest,
  RpcCongestionLevelResponse,
  RpcGasPriceRequest,
  RpcGasPriceResponse,
  RpcHealthRequest,
  RpcHealthResponse,
  RpcLightClientBlockProofRequest,
  RpcLightClientBlockProofResponse,
  RpcLightClientExecutionProofRequest,
  RpcLightClientExecutionProofResponse,
  RpcLightClientNextBlockRequest,
  RpcLightClientNextBlockResponse,
  RpcMaintenanceWindowsRequest,
  RpcNetworkInfoRequest,
  RpcNetworkInfoResponse,
  RpcProtocolConfigRequest,
  RpcProtocolConfigResponse,
  RpcQueryRequest,
  RpcQueryResponse,
  RpcReceiptRequest,
  RpcReceiptResponse,
  RpcSendTransactionRequest,
  RpcSplitStorageInfoRequest,
  RpcSplitStorageInfoResponse,
  RpcStateChangesInBlockByTypeRequest,
  RpcStateChangesInBlockByTypeResponse,
  RpcStateChangesInBlockRequest,
  RpcStateChangesInBlockResponse,
  RpcStatusRequest,
  RpcStatusResponse,
  RpcTransactionResponse,
  RpcTransactionStatusRequest,
  RpcValidatorRequest,
  RpcValidatorResponse,
  RpcValidatorsOrderedRequest,
} from '@near-js/jsonrpc-types';

// Dynamic RPC methods interface with proper typing
export interface DynamicRpcMethods {
  experimentalChanges(
    params?: RpcStateChangesInBlockByTypeRequest
  ): Promise<RpcStateChangesInBlockResponse>;
  experimentalChangesInBlock(
    params?: RpcStateChangesInBlockRequest
  ): Promise<RpcStateChangesInBlockByTypeResponse>;
  experimentalCongestionLevel(
    params?: RpcCongestionLevelRequest
  ): Promise<RpcCongestionLevelResponse>;
  experimentalGenesisConfig(
    params?: GenesisConfigRequest
  ): Promise<GenesisConfig>;
  experimentalLightClientBlockProof(
    params?: RpcLightClientBlockProofRequest
  ): Promise<RpcLightClientBlockProofResponse>;
  experimentalLightClientProof(
    params?: RpcLightClientExecutionProofRequest
  ): Promise<RpcLightClientExecutionProofResponse>;
  experimentalMaintenanceWindows(
    params?: RpcMaintenanceWindowsRequest
  ): Promise<EXPERIMENTALMaintenanceWindowsResponse>;
  experimentalProtocolConfig(
    params?: RpcProtocolConfigRequest
  ): Promise<RpcProtocolConfigResponse>;
  experimentalReceipt(params?: RpcReceiptRequest): Promise<RpcReceiptResponse>;
  experimentalSplitStorageInfo(
    params?: RpcSplitStorageInfoRequest
  ): Promise<RpcSplitStorageInfoResponse>;
  experimentalTxStatus(
    params?: RpcTransactionStatusRequest
  ): Promise<RpcTransactionResponse>;
  experimentalValidatorsOrdered(
    params?: RpcValidatorsOrderedRequest
  ): Promise<EXPERIMENTALValidatorsOrderedResponse>;
  block(params?: RpcBlockRequest): Promise<RpcBlockResponse>;
  broadcastTxAsync(params?: RpcSendTransactionRequest): Promise<CryptoHash>;
  broadcastTxCommit(
    params?: RpcSendTransactionRequest
  ): Promise<RpcTransactionResponse>;
  changes(
    params?: RpcStateChangesInBlockByTypeRequest
  ): Promise<RpcStateChangesInBlockResponse>;
  chunk(params?: RpcChunkRequest): Promise<RpcChunkResponse>;
  clientConfig(
    params?: RpcClientConfigRequest
  ): Promise<RpcClientConfigResponse>;
  gasPrice(params?: RpcGasPriceRequest): Promise<RpcGasPriceResponse>;
  health(params?: RpcHealthRequest): Promise<RpcHealthResponse>;
  lightClientProof(
    params?: RpcLightClientExecutionProofRequest
  ): Promise<RpcLightClientExecutionProofResponse>;
  networkInfo(params?: RpcNetworkInfoRequest): Promise<RpcNetworkInfoResponse>;
  nextLightClientBlock(
    params?: RpcLightClientNextBlockRequest
  ): Promise<RpcLightClientNextBlockResponse>;
  query(params?: RpcQueryRequest): Promise<RpcQueryResponse>;
  sendTx(params?: RpcSendTransactionRequest): Promise<RpcTransactionResponse>;
  status(params?: RpcStatusRequest): Promise<RpcStatusResponse>;
  tx(params?: RpcTransactionStatusRequest): Promise<RpcTransactionResponse>;
  validators(params?: RpcValidatorRequest): Promise<RpcValidatorResponse>;
}

// Convenience methods interface
export interface ConvenienceMethods {
  viewAccount(params: {
    accountId: string;
    finality?: 'final' | 'near-final' | 'optimistic';
    blockId?: string | number;
  }): Promise<AccountView>;

  viewFunction(params: {
    accountId: string;
    methodName: string;
    argsBase64?: string;
    finality?: 'final' | 'near-final' | 'optimistic';
    blockId?: string | number;
  }): Promise<CallResult>;

  viewAccessKey(params: {
    accountId: string;
    publicKey: string;
    finality?: 'final' | 'near-final' | 'optimistic';
    blockId?: string | number;
  }): Promise<AccessKeyView>;
}

// Combined interface for the complete client
export interface CompleteClientInterface
  extends DynamicRpcMethods,
    ConvenienceMethods {
  // Generic call method for ultimate flexibility
  call<TParams = unknown, TResult = unknown>(
    method: string,
    params?: TParams
  ): Promise<TResult>;
}
