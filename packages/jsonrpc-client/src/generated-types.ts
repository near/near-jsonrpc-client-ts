// Auto-generated static RPC functions for tree-shaking
// Generated at: 2025-08-13T11:06:50.476Z
// Total functions: 31
// 
// This file is automatically generated by tools/codegen/generate-client-interface.ts
// Do not edit manually - changes will be overwritten

import type {
  AccessKeyView,
  AccountView,
  CallResult,
  CryptoHash,
  EXPERIMENTALMaintenanceWindowsResponse,
  EXPERIMENTALValidatorsOrderedResponse,
  GenesisConfig,
  GenesisConfigRequest,
  MaintenanceWindowsResponse,
  RpcBlockRequest,
  RpcBlockResponse,
  RpcChunkRequest,
  RpcChunkResponse,
  RpcClientConfigRequest,
  RpcClientConfigResponse,
  RpcCongestionLevelRequest,
  RpcCongestionLevelResponse,
  RpcGasPriceRequest,
  RpcGasPriceResponse,
  RpcHealthRequest,
  RpcHealthResponse,
  RpcLightClientBlockProofRequest,
  RpcLightClientBlockProofResponse,
  RpcLightClientExecutionProofRequest,
  RpcLightClientExecutionProofResponse,
  RpcLightClientNextBlockRequest,
  RpcLightClientNextBlockResponse,
  RpcMaintenanceWindowsRequest,
  RpcNetworkInfoRequest,
  RpcNetworkInfoResponse,
  RpcProtocolConfigRequest,
  RpcProtocolConfigResponse,
  RpcQueryRequest,
  RpcQueryResponse,
  RpcReceiptRequest,
  RpcReceiptResponse,
  RpcSendTransactionRequest,
  RpcSplitStorageInfoRequest,
  RpcSplitStorageInfoResponse,
  RpcStateChangesInBlockByTypeRequest,
  RpcStateChangesInBlockByTypeResponse,
  RpcStateChangesInBlockRequest,
  RpcStateChangesInBlockResponse,
  RpcStatusRequest,
  RpcStatusResponse,
  RpcTransactionResponse,
  RpcTransactionStatusRequest,
  RpcValidatorRequest,
  RpcValidatorResponse,
  RpcValidatorsOrderedRequest
} from '@near-js/jsonrpc-types';
import type { NearRpcClient } from './client';


// Dynamic RPC methods interface with proper typing
export interface DynamicRpcMethods {
  /**
   * [Deprecated] Returns changes for a given account, contract or contract code
   * for given block height or hash. Consider using changes instead.
   */
    experimentalChanges(params?: RpcStateChangesInBlockByTypeRequest): Promise<RpcStateChangesInBlockResponse>;
  /**
   * [Deprecated] Returns changes in block for given block height or hash over
   * all transactions for all the types. Includes changes like account_touched,
   * access_key_touched, data_touched, contract_code_touched. Consider using
   * block_effects instead
   */
    experimentalChangesInBlock(params?: RpcStateChangesInBlockRequest): Promise<RpcStateChangesInBlockByTypeResponse>;
  /**
   * Queries the congestion level of a shard. More info about congestion
   * [here](https://near.github.io/nearcore/architecture/how/receipt-congestion.html?highlight=congestion#receipt-congestion)
   */
    experimentalCongestionLevel(params?: RpcCongestionLevelRequest): Promise<RpcCongestionLevelResponse>;
  /**
   * [Deprecated] Get initial state and parameters for the genesis block.
   * Consider genesis_config instead.
   */
    experimentalGenesisConfig(params?: GenesisConfigRequest): Promise<GenesisConfig>;
  /** Returns the proofs for a transaction execution. */
    experimentalLightClientBlockProof(params?: RpcLightClientBlockProofRequest): Promise<RpcLightClientBlockProofResponse>;
  /** Returns the proofs for a transaction execution. */
    experimentalLightClientProof(params?: RpcLightClientExecutionProofRequest): Promise<RpcLightClientExecutionProofResponse>;
  /**
   * [Deprecated] Returns the future windows for maintenance in current epoch
   * for the specified account. In the maintenance windows, the node will not be
   * block producer or chunk producer. Consider using maintenance_windows
   * instead.
   */
    experimentalMaintenanceWindows(params?: RpcMaintenanceWindowsRequest): Promise<EXPERIMENTALMaintenanceWindowsResponse>;
  /**
   * A configuration that defines the protocol-level parameters such as
   * gas/storage costs, limits, feature flags, other settings
   */
    experimentalProtocolConfig(params?: RpcProtocolConfigRequest): Promise<RpcProtocolConfigResponse>;
  /** Fetches a receipt by its ID (as is, without a status or execution outcome) */
    experimentalReceipt(params?: RpcReceiptRequest): Promise<RpcReceiptResponse>;
  /**
   * Contains the split storage information. More info on split storage
   * [here](https://near-nodes.io/archival/split-storage-archival)
   */
    experimentalSplitStorageInfo(params?: RpcSplitStorageInfoRequest): Promise<RpcSplitStorageInfoResponse>;
  /**
   * Queries status of a transaction by hash, returning the final transaction
   * result and details of all receipts.
   */
    experimentalTxStatus(params?: RpcTransactionStatusRequest): Promise<RpcTransactionResponse>;
  /**
   * Returns the current epoch validators ordered in the block producer order
   * with repetition. This endpoint is solely used for bridge currently and is
   * not intended for other external use cases.
   */
    experimentalValidatorsOrdered(params?: RpcValidatorsOrderedRequest): Promise<EXPERIMENTALValidatorsOrderedResponse>;
  /** Returns block details for given height or hash */
    block(params?: RpcBlockRequest): Promise<RpcBlockResponse>;
  /**
   * Returns changes in block for given block height or hash over all
   * transactions for all the types. Includes changes like account_touched,
   * access_key_touched, data_touched, contract_code_touched.
   */
    blockEffects(params?: RpcStateChangesInBlockRequest): Promise<RpcStateChangesInBlockByTypeResponse>;
  /**
   * [Deprecated] Sends a transaction and immediately returns transaction hash.
   * Consider using send_tx instead.
   */
    broadcastTxAsync(params?: RpcSendTransactionRequest): Promise<CryptoHash>;
  /**
   * [Deprecated] Sends a transaction and waits until transaction is fully
   * complete. (Has a 10 second timeout). Consider using send_tx instead.
   */
    broadcastTxCommit(params?: RpcSendTransactionRequest): Promise<RpcTransactionResponse>;
  /**
   * Returns changes for a given account, contract or contract code for given
   * block height or hash.
   */
    changes(params?: RpcStateChangesInBlockByTypeRequest): Promise<RpcStateChangesInBlockResponse>;
  /**
   * Returns details of a specific chunk. You can run a block details query to
   * get a valid chunk hash.
   */
    chunk(params?: RpcChunkRequest): Promise<RpcChunkResponse>;
  /** Queries client node configuration */
    clientConfig(params?: RpcClientConfigRequest): Promise<RpcClientConfigResponse>;
  /**
   * Returns gas price for a specific block_height or block_hash. Using [null]
   * will return the most recent block's gas price.
   */
    gasPrice(params?: RpcGasPriceRequest): Promise<RpcGasPriceResponse>;
  /** Get initial state and parameters for the genesis block */
    genesisConfig(params?: GenesisConfigRequest): Promise<GenesisConfig>;
  /** Returns the current health status of the RPC node the client connects to. */
    health(params?: RpcHealthRequest): Promise<RpcHealthResponse>;
  /** Returns the proofs for a transaction execution. */
    lightClientProof(params?: RpcLightClientExecutionProofRequest): Promise<RpcLightClientExecutionProofResponse>;
  /**
   * Returns the future windows for maintenance in current epoch for the
   * specified account. In the maintenance windows, the node will not be block
   * producer or chunk producer.
   */
    maintenanceWindows(params?: RpcMaintenanceWindowsRequest): Promise<MaintenanceWindowsResponse>;
  /**
   * Queries the current state of node network connections. This includes
   * information about active peers, transmitted data, known producers, etc.
   */
    networkInfo(params?: RpcNetworkInfoRequest): Promise<RpcNetworkInfoResponse>;
  /** Returns the next light client block. */
    nextLightClientBlock(params?: RpcLightClientNextBlockRequest): Promise<RpcLightClientNextBlockResponse>;
  /**
   * This module allows you to make generic requests to the network. The
   * `RpcQueryRequest` struct takes in a
   * [`BlockReference`](https://docs.rs/near-primitives/0.12.0/near_primitives/types/enum.BlockReference.html)
   * and a
   * [`QueryRequest`](https://docs.rs/near-primitives/0.12.0/near_primitives/views/enum.QueryRequest.html).
   * The `BlockReference` enum allows you to specify a block by `Finality`,
   * `BlockId` or `SyncCheckpoint`. The `QueryRequest` enum provides multiple
   * variants for performing the following actions: - View an account's details
   * - View a contract's code - View the state of an account - View the
   * `AccessKey` of an account - View the `AccessKeyList` of an account - Call a
   * function in a contract deployed on the network.
   */
    query(params?: RpcQueryRequest): Promise<RpcQueryResponse>;
  /**
   * Sends transaction. Returns the guaranteed execution status and the results
   * the blockchain can provide at the moment.
   */
    sendTx(params?: RpcSendTransactionRequest): Promise<RpcTransactionResponse>;
  /**
   * Requests the status of the connected RPC node. This includes information
   * about sync status, nearcore node version, protocol version, the current set
   * of validators, etc.
   */
    status(params?: RpcStatusRequest): Promise<RpcStatusResponse>;
  /**
   * Queries status of a transaction by hash and returns the final transaction
   * result.
   */
    tx(params?: RpcTransactionStatusRequest): Promise<RpcTransactionResponse>;
  /**
   * Queries active validators on the network. Returns details and the state of
   * validation on the blockchain.
   */
    validators(params?: RpcValidatorRequest): Promise<RpcValidatorResponse>;
}

// Convenience methods interface
export interface ConvenienceMethods {
  viewAccount(params: {
    accountId: string;
    finality?: 'final' | 'near-final' | 'optimistic';
    blockId?: string | number;
  }): Promise<AccountView>;
  
  viewFunction(params: {
    accountId: string;
    methodName: string;
    argsBase64?: string;
    finality?: 'final' | 'near-final' | 'optimistic';
    blockId?: string | number;
  }): Promise<CallResult>;
  
  viewAccessKey(params: {
    accountId: string;
    publicKey: string;
    finality?: 'final' | 'near-final' | 'optimistic';
    blockId?: string | number;
  }): Promise<AccessKeyView>;
}

// Combined interface for the complete client
export interface CompleteClientInterface extends DynamicRpcMethods, ConvenienceMethods {
  // Generic call method for ultimate flexibility
  call<TParams = unknown, TResult = unknown>(
    method: string, 
    params?: TParams
  ): Promise<TResult>;
}

/**
 * [Deprecated] Returns changes for a given account, contract or contract code
 * for given block height or hash. Consider using changes instead.
 */
export async function experimentalChanges(
  client: NearRpcClient,
  params?: RpcStateChangesInBlockByTypeRequest
): Promise<RpcStateChangesInBlockResponse> {
  return client.makeRequest('EXPERIMENTAL_changes', params);
}

/**
 * [Deprecated] Returns changes in block for given block height or hash over
 * all transactions for all the types. Includes changes like account_touched,
 * access_key_touched, data_touched, contract_code_touched. Consider using
 * block_effects instead
 */
export async function experimentalChangesInBlock(
  client: NearRpcClient,
  params?: RpcStateChangesInBlockRequest
): Promise<RpcStateChangesInBlockByTypeResponse> {
  return client.makeRequest('EXPERIMENTAL_changes_in_block', params);
}

/**
 * Queries the congestion level of a shard. More info about congestion
 * [here](https://near.github.io/nearcore/architecture/how/receipt-congestion.html?highlight=congestion#receipt-congestion)
 */
export async function experimentalCongestionLevel(
  client: NearRpcClient,
  params?: RpcCongestionLevelRequest
): Promise<RpcCongestionLevelResponse> {
  return client.makeRequest('EXPERIMENTAL_congestion_level', params);
}

/**
 * [Deprecated] Get initial state and parameters for the genesis block.
 * Consider genesis_config instead.
 */
export async function experimentalGenesisConfig(
  client: NearRpcClient,
  params?: GenesisConfigRequest
): Promise<GenesisConfig> {
  return client.makeRequest('EXPERIMENTAL_genesis_config', params);
}

/** Returns the proofs for a transaction execution. */
export async function experimentalLightClientBlockProof(
  client: NearRpcClient,
  params?: RpcLightClientBlockProofRequest
): Promise<RpcLightClientBlockProofResponse> {
  return client.makeRequest('EXPERIMENTAL_light_client_block_proof', params);
}

/** Returns the proofs for a transaction execution. */
export async function experimentalLightClientProof(
  client: NearRpcClient,
  params?: RpcLightClientExecutionProofRequest
): Promise<RpcLightClientExecutionProofResponse> {
  return client.makeRequest('EXPERIMENTAL_light_client_proof', params);
}

/**
 * [Deprecated] Returns the future windows for maintenance in current epoch
 * for the specified account. In the maintenance windows, the node will not be
 * block producer or chunk producer. Consider using maintenance_windows
 * instead.
 */
export async function experimentalMaintenanceWindows(
  client: NearRpcClient,
  params?: RpcMaintenanceWindowsRequest
): Promise<EXPERIMENTALMaintenanceWindowsResponse> {
  return client.makeRequest('EXPERIMENTAL_maintenance_windows', params);
}

/**
 * A configuration that defines the protocol-level parameters such as
 * gas/storage costs, limits, feature flags, other settings
 */
export async function experimentalProtocolConfig(
  client: NearRpcClient,
  params?: RpcProtocolConfigRequest
): Promise<RpcProtocolConfigResponse> {
  return client.makeRequest('EXPERIMENTAL_protocol_config', params);
}

/** Fetches a receipt by its ID (as is, without a status or execution outcome) */
export async function experimentalReceipt(
  client: NearRpcClient,
  params?: RpcReceiptRequest
): Promise<RpcReceiptResponse> {
  return client.makeRequest('EXPERIMENTAL_receipt', params);
}

/**
 * Contains the split storage information. More info on split storage
 * [here](https://near-nodes.io/archival/split-storage-archival)
 */
export async function experimentalSplitStorageInfo(
  client: NearRpcClient,
  params?: RpcSplitStorageInfoRequest
): Promise<RpcSplitStorageInfoResponse> {
  return client.makeRequest('EXPERIMENTAL_split_storage_info', params);
}

/**
 * Queries status of a transaction by hash, returning the final transaction
 * result and details of all receipts.
 */
export async function experimentalTxStatus(
  client: NearRpcClient,
  params?: RpcTransactionStatusRequest
): Promise<RpcTransactionResponse> {
  return client.makeRequest('EXPERIMENTAL_tx_status', params);
}

/**
 * Returns the current epoch validators ordered in the block producer order
 * with repetition. This endpoint is solely used for bridge currently and is
 * not intended for other external use cases.
 */
export async function experimentalValidatorsOrdered(
  client: NearRpcClient,
  params?: RpcValidatorsOrderedRequest
): Promise<EXPERIMENTALValidatorsOrderedResponse> {
  return client.makeRequest('EXPERIMENTAL_validators_ordered', params);
}

/** Returns block details for given height or hash */
export async function block(
  client: NearRpcClient,
  params?: RpcBlockRequest
): Promise<RpcBlockResponse> {
  return client.makeRequest('block', params);
}

/**
 * Returns changes in block for given block height or hash over all
 * transactions for all the types. Includes changes like account_touched,
 * access_key_touched, data_touched, contract_code_touched.
 */
export async function blockEffects(
  client: NearRpcClient,
  params?: RpcStateChangesInBlockRequest
): Promise<RpcStateChangesInBlockByTypeResponse> {
  return client.makeRequest('block_effects', params);
}

/**
 * [Deprecated] Sends a transaction and immediately returns transaction hash.
 * Consider using send_tx instead.
 */
export async function broadcastTxAsync(
  client: NearRpcClient,
  params?: RpcSendTransactionRequest
): Promise<CryptoHash> {
  return client.makeRequest('broadcast_tx_async', params);
}

/**
 * [Deprecated] Sends a transaction and waits until transaction is fully
 * complete. (Has a 10 second timeout). Consider using send_tx instead.
 */
export async function broadcastTxCommit(
  client: NearRpcClient,
  params?: RpcSendTransactionRequest
): Promise<RpcTransactionResponse> {
  return client.makeRequest('broadcast_tx_commit', params);
}

/**
 * Returns changes for a given account, contract or contract code for given
 * block height or hash.
 */
export async function changes(
  client: NearRpcClient,
  params?: RpcStateChangesInBlockByTypeRequest
): Promise<RpcStateChangesInBlockResponse> {
  return client.makeRequest('changes', params);
}

/**
 * Returns details of a specific chunk. You can run a block details query to
 * get a valid chunk hash.
 */
export async function chunk(
  client: NearRpcClient,
  params?: RpcChunkRequest
): Promise<RpcChunkResponse> {
  return client.makeRequest('chunk', params);
}

/** Queries client node configuration */
export async function clientConfig(
  client: NearRpcClient,
  params?: RpcClientConfigRequest
): Promise<RpcClientConfigResponse> {
  return client.makeRequest('client_config', params);
}

/**
 * Returns gas price for a specific block_height or block_hash. Using [null]
 * will return the most recent block's gas price.
 */
export async function gasPrice(
  client: NearRpcClient,
  params?: RpcGasPriceRequest
): Promise<RpcGasPriceResponse> {
  return client.makeRequest('gas_price', params);
}

/** Get initial state and parameters for the genesis block */
export async function genesisConfig(
  client: NearRpcClient,
  params?: GenesisConfigRequest
): Promise<GenesisConfig> {
  return client.makeRequest('genesis_config', params);
}

/** Returns the current health status of the RPC node the client connects to. */
export async function health(
  client: NearRpcClient,
  params?: RpcHealthRequest
): Promise<RpcHealthResponse> {
  return client.makeRequest('health', params);
}

/** Returns the proofs for a transaction execution. */
export async function lightClientProof(
  client: NearRpcClient,
  params?: RpcLightClientExecutionProofRequest
): Promise<RpcLightClientExecutionProofResponse> {
  return client.makeRequest('light_client_proof', params);
}

/**
 * Returns the future windows for maintenance in current epoch for the
 * specified account. In the maintenance windows, the node will not be block
 * producer or chunk producer.
 */
export async function maintenanceWindows(
  client: NearRpcClient,
  params?: RpcMaintenanceWindowsRequest
): Promise<MaintenanceWindowsResponse> {
  return client.makeRequest('maintenance_windows', params);
}

/**
 * Queries the current state of node network connections. This includes
 * information about active peers, transmitted data, known producers, etc.
 */
export async function networkInfo(
  client: NearRpcClient,
  params?: RpcNetworkInfoRequest
): Promise<RpcNetworkInfoResponse> {
  return client.makeRequest('network_info', params);
}

/** Returns the next light client block. */
export async function nextLightClientBlock(
  client: NearRpcClient,
  params?: RpcLightClientNextBlockRequest
): Promise<RpcLightClientNextBlockResponse> {
  return client.makeRequest('next_light_client_block', params);
}

/**
 * This module allows you to make generic requests to the network. The
 * `RpcQueryRequest` struct takes in a
 * [`BlockReference`](https://docs.rs/near-primitives/0.12.0/near_primitives/types/enum.BlockReference.html)
 * and a
 * [`QueryRequest`](https://docs.rs/near-primitives/0.12.0/near_primitives/views/enum.QueryRequest.html).
 * The `BlockReference` enum allows you to specify a block by `Finality`,
 * `BlockId` or `SyncCheckpoint`. The `QueryRequest` enum provides multiple
 * variants for performing the following actions: - View an account's details
 * - View a contract's code - View the state of an account - View the
 * `AccessKey` of an account - View the `AccessKeyList` of an account - Call a
 * function in a contract deployed on the network.
 */
export async function query(
  client: NearRpcClient,
  params?: RpcQueryRequest
): Promise<RpcQueryResponse> {
  return client.makeRequest('query', params);
}

/**
 * Sends transaction. Returns the guaranteed execution status and the results
 * the blockchain can provide at the moment.
 */
export async function sendTx(
  client: NearRpcClient,
  params?: RpcSendTransactionRequest
): Promise<RpcTransactionResponse> {
  return client.makeRequest('send_tx', params);
}

/**
 * Requests the status of the connected RPC node. This includes information
 * about sync status, nearcore node version, protocol version, the current set
 * of validators, etc.
 */
export async function status(
  client: NearRpcClient,
  params?: RpcStatusRequest
): Promise<RpcStatusResponse> {
  return client.makeRequest('status', params);
}

/**
 * Queries status of a transaction by hash and returns the final transaction
 * result.
 */
export async function tx(
  client: NearRpcClient,
  params?: RpcTransactionStatusRequest
): Promise<RpcTransactionResponse> {
  return client.makeRequest('tx', params);
}

/**
 * Queries active validators on the network. Returns details and the state of
 * validation on the blockchain.
 */
export async function validators(
  client: NearRpcClient,
  params?: RpcValidatorRequest
): Promise<RpcValidatorResponse> {
  return client.makeRequest('validators', params);
}
