// Auto-generated TypeScript interface for NEAR RPC client
// Generated at: 2025-07-21T14:55:01.191Z
// Total methods: 28
// 
// This file is automatically generated by tools/codegen/generate-client-interface.ts
// Do not edit manually - changes will be overwritten

import type {
  BlockResponse,
  BroadcastTxAsyncResponse,
  BroadcastTxCommitResponse,
  ChangesResponse,
  ChunkResponse,
  ClientConfigResponse,
  EXPERIMENTALChangesInBlockResponse,
  EXPERIMENTALChangesResponse,
  EXPERIMENTALCongestionLevelResponse,
  EXPERIMENTALGenesisConfigResponse,
  EXPERIMENTALLightClientBlockProofResponse,
  EXPERIMENTALLightClientProofResponse,
  EXPERIMENTALMaintenanceWindowsResponse,
  EXPERIMENTALProtocolConfigResponse,
  EXPERIMENTALReceiptResponse,
  EXPERIMENTALSplitStorageInfoResponse,
  EXPERIMENTALTxStatusResponse,
  EXPERIMENTALValidatorsOrderedResponse,
  GasPriceResponse,
  GenesisConfigRequest,
  HealthResponse,
  LightClientProofResponse,
  NetworkInfoResponse,
  NextLightClientBlockResponse,
  QueryResponse,
  RpcBlockRequest,
  RpcChunkRequest,
  RpcClientConfigRequest,
  RpcCongestionLevelRequest,
  RpcGasPriceRequest,
  RpcHealthRequest,
  RpcLightClientBlockProofRequest,
  RpcLightClientExecutionProofRequest,
  RpcLightClientNextBlockRequest,
  RpcMaintenanceWindowsRequest,
  RpcNetworkInfoRequest,
  RpcProtocolConfigRequest,
  RpcQueryRequest,
  RpcReceiptRequest,
  RpcSendTransactionRequest,
  RpcSplitStorageInfoRequest,
  RpcStateChangesInBlockByTypeRequest,
  RpcStateChangesInBlockRequest,
  RpcStatusRequest,
  RpcTransactionStatusRequest,
  RpcValidatorRequest,
  RpcValidatorsOrderedRequest,
  SendTxResponse,
  StatusResponse,
  TxResponse,
  ValidatorsResponse
} from '@near-js/jsonrpc-types';

// Dynamic RPC methods interface with proper typing
export interface DynamicRpcMethods {
  experimentalChanges(params?: RpcStateChangesInBlockByTypeRequest): Promise<EXPERIMENTALChangesResponse>;
  experimentalChangesInBlock(params?: RpcStateChangesInBlockRequest): Promise<EXPERIMENTALChangesInBlockResponse>;
  experimentalCongestionLevel(params?: RpcCongestionLevelRequest): Promise<EXPERIMENTALCongestionLevelResponse>;
  experimentalGenesisConfig(params?: GenesisConfigRequest): Promise<EXPERIMENTALGenesisConfigResponse>;
  experimentalLightClientBlockProof(params?: RpcLightClientBlockProofRequest): Promise<EXPERIMENTALLightClientBlockProofResponse>;
  experimentalLightClientProof(params?: RpcLightClientExecutionProofRequest): Promise<EXPERIMENTALLightClientProofResponse>;
  experimentalMaintenanceWindows(params?: RpcMaintenanceWindowsRequest): Promise<EXPERIMENTALMaintenanceWindowsResponse>;
  experimentalProtocolConfig(params?: RpcProtocolConfigRequest): Promise<EXPERIMENTALProtocolConfigResponse>;
  experimentalReceipt(params?: RpcReceiptRequest): Promise<EXPERIMENTALReceiptResponse>;
  experimentalSplitStorageInfo(params?: RpcSplitStorageInfoRequest): Promise<EXPERIMENTALSplitStorageInfoResponse>;
  experimentalTxStatus(params?: RpcTransactionStatusRequest): Promise<EXPERIMENTALTxStatusResponse>;
  experimentalValidatorsOrdered(params?: RpcValidatorsOrderedRequest): Promise<EXPERIMENTALValidatorsOrderedResponse>;
  block(params?: RpcBlockRequest): Promise<BlockResponse>;
  broadcastTxAsync(params?: RpcSendTransactionRequest): Promise<BroadcastTxAsyncResponse>;
  broadcastTxCommit(params?: RpcSendTransactionRequest): Promise<BroadcastTxCommitResponse>;
  changes(params?: RpcStateChangesInBlockByTypeRequest): Promise<ChangesResponse>;
  chunk(params?: RpcChunkRequest): Promise<ChunkResponse>;
  clientConfig(params?: RpcClientConfigRequest): Promise<ClientConfigResponse>;
  gasPrice(params?: RpcGasPriceRequest): Promise<GasPriceResponse>;
  health(params?: RpcHealthRequest): Promise<HealthResponse>;
  lightClientProof(params?: RpcLightClientExecutionProofRequest): Promise<LightClientProofResponse>;
  networkInfo(params?: RpcNetworkInfoRequest): Promise<NetworkInfoResponse>;
  nextLightClientBlock(params?: RpcLightClientNextBlockRequest): Promise<NextLightClientBlockResponse>;
  query(params?: RpcQueryRequest): Promise<QueryResponse>;
  sendTx(params?: RpcSendTransactionRequest): Promise<SendTxResponse>;
  status(params?: RpcStatusRequest): Promise<StatusResponse>;
  tx(params?: RpcTransactionStatusRequest): Promise<TxResponse>;
  validators(params?: RpcValidatorRequest): Promise<ValidatorsResponse>;
}

// Convenience methods interface
export interface ConvenienceMethods {
  viewAccount(params: {
    accountId: string;
    finality?: 'final' | 'near-final' | 'optimistic';
    blockId?: string | number;
  }): Promise<QueryResponse>;
  
  viewFunction(params: {
    accountId: string;
    methodName: string;
    argsBase64?: string;
    finality?: 'final' | 'near-final' | 'optimistic';
    blockId?: string | number;
  }): Promise<QueryResponse>;
  
  viewAccessKey(params: {
    accountId: string;
    publicKey: string;
    finality?: 'final' | 'near-final' | 'optimistic';
    blockId?: string | number;
  }): Promise<QueryResponse>;
}

// Combined interface for the complete client
export interface CompleteClientInterface extends DynamicRpcMethods, ConvenienceMethods {
  // Generic call method for ultimate flexibility
  call<TParams = unknown, TResult = unknown>(
    method: string, 
    params?: TParams
  ): Promise<TResult>;
}
