// Auto-generated TypeScript interface for NEAR RPC client
// Generated at: 2025-07-21T13:33:22.003Z
// Total methods: 28
// 
// This file is automatically generated by tools/codegen/generate-client-interface.ts
// Do not edit manually - changes will be overwritten

import type {
  BlockRequest,
  BlockResponse,
  BroadcastTxAsyncRequest,
  BroadcastTxAsyncResponse,
  BroadcastTxCommitRequest,
  BroadcastTxCommitResponse,
  ChangesRequest,
  ChangesResponse,
  ChunkRequest,
  ChunkResponse,
  ClientConfigRequest,
  ClientConfigResponse,
  EXPERIMENTALChangesInBlockRequest,
  EXPERIMENTALChangesInBlockResponse,
  EXPERIMENTALChangesRequest,
  EXPERIMENTALChangesResponse,
  EXPERIMENTALCongestionLevelRequest,
  EXPERIMENTALCongestionLevelResponse,
  EXPERIMENTALGenesisConfigRequest,
  EXPERIMENTALGenesisConfigResponse,
  EXPERIMENTALLightClientBlockProofRequest,
  EXPERIMENTALLightClientBlockProofResponse,
  EXPERIMENTALLightClientProofRequest,
  EXPERIMENTALLightClientProofResponse,
  EXPERIMENTALMaintenanceWindowsRequest,
  EXPERIMENTALMaintenanceWindowsResponse,
  EXPERIMENTALProtocolConfigRequest,
  EXPERIMENTALProtocolConfigResponse,
  EXPERIMENTALReceiptRequest,
  EXPERIMENTALReceiptResponse,
  EXPERIMENTALSplitStorageInfoRequest,
  EXPERIMENTALSplitStorageInfoResponse,
  EXPERIMENTALTxStatusRequest,
  EXPERIMENTALTxStatusResponse,
  EXPERIMENTALValidatorsOrderedRequest,
  EXPERIMENTALValidatorsOrderedResponse,
  GasPriceRequest,
  GasPriceResponse,
  HealthRequest,
  HealthResponse,
  LightClientProofRequest,
  LightClientProofResponse,
  NetworkInfoRequest,
  NetworkInfoResponse,
  NextLightClientBlockRequest,
  NextLightClientBlockResponse,
  QueryRequest,
  QueryResponse,
  SendTxRequest,
  SendTxResponse,
  StatusRequest,
  StatusResponse,
  TxRequest,
  TxResponse,
  ValidatorsRequest,
  ValidatorsResponse
} from '@near-js/jsonrpc-types';

// Dynamic RPC methods interface with proper typing
export interface DynamicRpcMethods {
  experimentalChanges(params?: EXPERIMENTALChangesRequest): Promise<EXPERIMENTALChangesResponse>;
  experimentalChangesInBlock(params?: EXPERIMENTALChangesInBlockRequest): Promise<EXPERIMENTALChangesInBlockResponse>;
  experimentalCongestionLevel(params?: EXPERIMENTALCongestionLevelRequest): Promise<EXPERIMENTALCongestionLevelResponse>;
  experimentalGenesisConfig(params?: EXPERIMENTALGenesisConfigRequest): Promise<EXPERIMENTALGenesisConfigResponse>;
  experimentalLightClientBlockProof(params?: EXPERIMENTALLightClientBlockProofRequest): Promise<EXPERIMENTALLightClientBlockProofResponse>;
  experimentalLightClientProof(params?: EXPERIMENTALLightClientProofRequest): Promise<EXPERIMENTALLightClientProofResponse>;
  experimentalMaintenanceWindows(params?: EXPERIMENTALMaintenanceWindowsRequest): Promise<EXPERIMENTALMaintenanceWindowsResponse>;
  experimentalProtocolConfig(params?: EXPERIMENTALProtocolConfigRequest): Promise<EXPERIMENTALProtocolConfigResponse>;
  experimentalReceipt(params?: EXPERIMENTALReceiptRequest): Promise<EXPERIMENTALReceiptResponse>;
  experimentalSplitStorageInfo(params?: EXPERIMENTALSplitStorageInfoRequest): Promise<EXPERIMENTALSplitStorageInfoResponse>;
  experimentalTxStatus(params?: EXPERIMENTALTxStatusRequest): Promise<EXPERIMENTALTxStatusResponse>;
  experimentalValidatorsOrdered(params?: EXPERIMENTALValidatorsOrderedRequest): Promise<EXPERIMENTALValidatorsOrderedResponse>;
  block(params?: BlockRequest): Promise<BlockResponse>;
  broadcastTxAsync(params?: BroadcastTxAsyncRequest): Promise<BroadcastTxAsyncResponse>;
  broadcastTxCommit(params?: BroadcastTxCommitRequest): Promise<BroadcastTxCommitResponse>;
  changes(params?: ChangesRequest): Promise<ChangesResponse>;
  chunk(params?: ChunkRequest): Promise<ChunkResponse>;
  clientConfig(params?: ClientConfigRequest): Promise<ClientConfigResponse>;
  gasPrice(params?: GasPriceRequest): Promise<GasPriceResponse>;
  health(params?: HealthRequest): Promise<HealthResponse>;
  lightClientProof(params?: LightClientProofRequest): Promise<LightClientProofResponse>;
  networkInfo(params?: NetworkInfoRequest): Promise<NetworkInfoResponse>;
  nextLightClientBlock(params?: NextLightClientBlockRequest): Promise<NextLightClientBlockResponse>;
  query(params?: QueryRequest): Promise<QueryResponse>;
  sendTx(params?: SendTxRequest): Promise<SendTxResponse>;
  status(params?: StatusRequest): Promise<StatusResponse>;
  tx(params?: TxRequest): Promise<TxResponse>;
  validators(params?: ValidatorsRequest): Promise<ValidatorsResponse>;
}

// Convenience methods interface
export interface ConvenienceMethods {
  viewAccount(params: {
    accountId: string;
    finality?: 'final' | 'near-final' | 'optimistic';
    blockId?: string | number;
  }): Promise<QueryResponse>;
  
  viewFunction(params: {
    accountId: string;
    methodName: string;
    argsBase64?: string;
    finality?: 'final' | 'near-final' | 'optimistic';
    blockId?: string | number;
  }): Promise<QueryResponse>;
  
  viewAccessKey(params: {
    accountId: string;
    publicKey: string;
    finality?: 'final' | 'near-final' | 'optimistic';
    blockId?: string | number;
  }): Promise<QueryResponse>;
}

// Combined interface for the complete client
export interface CompleteClientInterface extends DynamicRpcMethods, ConvenienceMethods {
  // Generic call method for ultimate flexibility
  call<TParams = unknown, TResult = unknown>(
    method: string, 
    params?: TParams
  ): Promise<TResult>;
}
